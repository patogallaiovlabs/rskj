blockchain = {
    config = {
        name = <name>
        verify = <verify>
        hardforkActivationHeights = { }
        consensusRules = { }
    }
    gc = {
        enabled = <enabled>
        epochs = <epochs>
        blocksPerEpoch = <blocksPerEpoch>
    }
}
peer = {
    active = [ ]
    trusted = [ ]
    connection.timeout = <timeout>
    channel.read.timeout = <timeout>
    p2p = {
        framing.maxSize = <maxSize>
        eip8 = <eip8>
        pingInterval = <pingInterval>
    }
    maxActivePeers = <maxActivePeers>
    filter = {
        maxConnections = <maxConnections>
        networkCidr = <networkCidr>
    }
    discovery = {
        enabled = <enabled>
        ip.list = [<ip>]
    }
    port = <port>
    networkId = <networkId>
}
genesis = <genesis>
database = {
    dir = <dir>
    import = {
        url = <url>
        trusted-keys = [<trusted-key>]
    }
}
hello.phrase = <phrase>
wallet = {
    enabled = <enabled>
    accounts = [<accounts>]
}
miner = {
    minGasPrice = <minGasPrice>
    server = {
        enabled = <enabled>
        isFixedClock = <isFixedClock>
    }
    client = {
        enabled = <enabled>
        autoMine = <autoMine>
        delayBetweenBlocks = <delayBetweenBlocks>
        delayBetweenRefreshes = <delayBetweenRefreshes>
    }
    coinbase.secret = <secret>
}
database = {
    reset = <reset>
    import = {
        enabled = <enabled>
        trusted-keys = [<trusted-key>]
    }
}
bind_address = <bind_address>
public = {
    ipCheckService = <ipCheckService>
}
transaction = {
    outdated = {
        threshold = <threshold>
        timeout = <timeout>
    }
    gasPriceBump = <gasPriceBump>
}
dump = {
    full = <full>
    dir = <dir>
    block = <block>
    style = <style>
    clean.on.restart = <restart>
}
vm = {
    executionStackSize = <executionStackSize>
    structured = {
        trace = <trace>
        traceOptions = <traceOptions>
        dir = <dir>
        compressed = <compressed>
        initStorageLimit = <initStorageLimit>
    }
}
play.vm = <vm>
keyvalue.datasource = <datasource>
sync = {
    enabled = <enabled>
    max.hashes.ask = <ask>
    peer.count = <count>
    expectedPeers = <expectedPeers>
    timeoutWaitingPeers = <timeoutWaitingPeers>
    timeoutWaitingRequest = <timeoutWaitingRequest>
    expirationTimePeerStatus = <expirationTimePeerStatus>
    maxSkeletonChunks = <maxSkeletonChunks>
    maxRequestedBodies = <maxRequestedBodies>
    longSyncLimit = <longSyncLimit>
    chunkSize = <chunkSize>
}
rpc = {
    providers = {
        web = {
            cors = <cors>
            http = {
                enabled = <enabled>
                bind_address = <bind_address>
                hosts = []
                port = <port>
                linger_time = <linger_time>
            }
            ws = {
                enabled = <enabled>
                bind_address = <bind_address>
                port = <port>
            }
        }
    }
    modules = [
        {
            name = <name>
            version = <version>
            enabled = <enabled>
        }
    ]
}
wire = {
    protocol = <protocol>
}
solc.path = <path>
scoring = {
    nodes = {
        number = <number>
        duration = <duration>
        increment = <increment>
        maximum = <maximum>
    }
    addresses = {
        duration = <duration>
        increment = <increment>
        maximum = <maximum>
    }
}
cache = {
  states = {
    max-elements = <max-elements>
  }
}
